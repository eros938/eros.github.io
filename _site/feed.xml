<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2025-01-30T14:10:11+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Babullay</title><subtitle>I use this site to showcase my portfolio and Blogs/Writetups</subtitle><author><name>Babullay</name><email>wahabkhan2006@proton.me</email></author><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-01-29T17:31:53+07:00</published><updated>2025-01-29T17:31:53+07:00</updated><id>http://localhost:4000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Babullay</name><email>wahabkhan2006@proton.me</email></author><category term="my-site" /><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts "Hi, #{name}" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.]]></summary></entry><entry><title type="html">How to Initiate a UART Shell and Analyze Bootloader Information in Embedded Systems</title><link href="http://localhost:4000/How-to-Initiate-a-UART-Shell-and-Analyze-Bootloader-Information-in-Embedded-Systems/" rel="alternate" type="text/html" title="How to Initiate a UART Shell and Analyze Bootloader Information in Embedded Systems" /><published>2025-01-28T16:28:05+07:00</published><updated>2025-01-28T16:28:05+07:00</updated><id>http://localhost:4000/How%20to%20Initiate%20a%20UART%20Shell%20and%20Analyze%20Bootloader%20Information%20in%20Embedded%20Systems</id><content type="html" xml:base="http://localhost:4000/How-to-Initiate-a-UART-Shell-and-Analyze-Bootloader-Information-in-Embedded-Systems/"><![CDATA[<h2 id="initiating-the-uart-shell">Initiating the UART Shell</h2>
<p>To begin interacting with an embedded device through a UART shell, the first step is to locate the UART pins on the device. You can achieve this by either using a multimeter or leveraging automated tools that simplify the identification process. Once you’ve found the UART pins, the next step is to establish a connection with a USB to TTL adapter.</p>

<h2 id="connection-setup">Connection Setup:</h2>
<p>Use jumper wires to connect the identified UART pins to your USB to TTL device, following this configuration:
UART Pin → USB to TTL Pin
 RX (Receive) → TX (Transmit)
 TX (Transmit) → RX (Receive)
GND (Ground) → GND</p>

<p><img src="image.png" alt="USB to ttl" /></p>

<p>With the connections in place, you’ll need to identify the USB port to which your USB to TTL device is connected. On Windows, this port is usually labeled as <code class="language-plaintext highlighter-rouge">COM3</code> or similar, while on Linux-based systems like Ubuntu, it is referred to as <code class="language-plaintext highlighter-rouge">ttyUSB0</code> or <code class="language-plaintext highlighter-rouge">tty0</code>.</p>
<h2 id="baud-rate-configuration">Baud Rate Configuration:</h2>
<p>The baud rate is crucial for establishing a successful connection. Common baud rates include 9600, 115200, or 57600. This rate can be predetermined by the device documentation, or you might need to experiment using frameworks or default settings.
Once everything is set, fire up a terminal program like PuTTY (Windows) or <code class="language-plaintext highlighter-rouge">screen</code> (Linux), and connect to the appropriate port. If successful, you’ll have direct access to the device’s console, allowing you to interact with the system at a low level.</p>
<h2 id="understanding-the-boot-sequence-in-embedded-systems">Understanding the Boot Sequence in Embedded Systems</h2>
<p>Before diving into the bootloader analysis, it’s important to understand how the boot sequence works in embedded systems. The boot process typically starts with a small amount of RAM and ROM within the chip, containing the Primary Program Loader. This loader’s job is to load the U-Boot (a universal bootloader) from external ROM into RAM.</p>

<p><img src="image-1.png" alt="High Level Block Diagram Of Boot Sequence" /></p>]]></content><author><name>Babullay</name><email>wahabkhan2006@proton.me</email></author><category term="linux" /><category term="Embedded" /><category term="Hardware" /><category term="UART" /><category term="Hardware Hacking" /><summary type="html"><![CDATA[In this blog, we’re going to dive deep into the process of identifying UART interfaces, initiating a UART shell, analyzing bootloader information, and exploring embedded systems.]]></summary></entry></feed>